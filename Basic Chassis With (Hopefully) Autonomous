#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, I2C_1,  backrightMotor, sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  backleftMotor,  sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port2,           frontrightMotor, tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port3,           frontleftMotor, tmotorVex393, openLoop)
#pragma config(Motor,  port4,           backrightMotor, tmotorVex393, openLoop, reversed, encoder, encoderPort, I2C_1, 1000)
#pragma config(Motor,  port5,           backleftMotor, tmotorVex393, openLoop, encoder, encoderPort, I2C_2, 1000)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	nMotorEncoder[backrightMotor] = 0;
	nMotorEncoder[backleftMotor] = 0;
	while(nMotorEncoder[backrightMotor] < 1800)
	{
		motor[frontrightMotor] = 63;
    motor[backrightMotor]  = 63;
    motor[frontleftMotor] = 63;
    motor[backleftMotor]  = 63;
	}

	nMotorEncoder[backrightMotor] = 0;
	nMotorEncoder[backleftMotor] = 0;
	while(nMotorEncoder[backrightMotor] < -1800)
	{
    motor[frontrightMotor] = -63;
    motor[backrightMotor]  = -63;
    motor[frontleftMotor] = -63;
    motor[backleftMotor]  = -63;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

//============================================| TASK ONE |============================================
task One()
{
//        put something in here later
}
//====================================================================================================

//============================================| TASK TWO |============================================
task Two()
{
    while(1 == 1)
  {
    motor[frontrightMotor] = vexRT[Ch2];
    motor[backrightMotor]  = vexRT[Ch2];
    motor[frontleftMotor] = vexRT[Ch3];
    motor[backleftMotor]  = vexRT[Ch3];
  }
}
//====================================================================================================

//============================================| TASK MAIN |===========================================
task usercontrol()
{
  StartTask(One);   
  StartTask(Two);   
  while(true)
  {}
}
//====================================================================================================
